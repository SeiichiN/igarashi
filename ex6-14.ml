(* 練習問題 6.14 *)

(*
6.5.2で定義した is_prime は、n が素数か判定するのに、n-1 から順に 2 までのすべての数で割り切れるかどうか試していますが、これはあまり効率がよいとはいえません。以下のそれぞれの方法で、3000番目の素数の計算が速くなるかどうか試してみなさい。
1. 割る数として、小さい数のほうから試したいく
2. 割る数の上限を、ルートn の小数点以下の切り捨ての数とする。切り捨ては、OCaml では、floor という関数になる。
3. 割る数として、n より小さい素数だけを試す
4. 割る数として、ルートn の小数点以下切り捨ての素数だけを試す

ヒント：最後のふたつの場合は、prime_seq 関数をこれまでに見つかった素数のリストを引数として取るようにします。

let rec prime_seq primes x = ...

あとは、1, 3, 6, 10, 15, ... という無限列を作った時のテクニックを使います。

# nthseq 20 (prime_seq [] 1);;
- : int = 71

 *)
